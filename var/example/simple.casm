//  
//  Copyright (c) 2014-2016 CASM Organization https://github.com/casm-lang
//  All rights reserved.
//  
//  Developed by: Florian Hahn
//                Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/ppaulweber/casmc
//  
//  This file is part of casmc.
//  
//  casmc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  casmc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with casmc. If not, see <http://www.gnu.org/licenses/>.
//  

CASM simple init foo

function x : -> Integer
function y : -> Integer
function z : -> Integer
function s : -> String
function flag : -> Boolean
function cnt : -> Integer

rule foo =
{

 if cnt = undef then
 {
    skip
    //s := "this is a text"
    cnt := 0
    //program( self ) := undef
 }
 
 else
    if cnt >= 1234567 then
    // if cnt >= 1000000000 then
    {
        program( self ) := undef //@epilog

        print x + y + z // print dec( x )
        print x
        print y
        print z
        //print s
        print cnt
    }
    else
    {
        cnt := cnt + 1
    }
 {|
    x := 1
    
    y := x

    {
      x := x + 2
    }
    
    {
      //y := y + 1
      {|
        let a = x + 2 in
        let b = a + 2 in
        {
          x := a + 2
        }
      |}
    }
    
    z := 28 + x
 |}

 /*
 x := 0
 y := 1
 z := 2

 if cnt = undef then
   cnt := 0
 else
   cnt := cnt + 1

 if cnt = 10 then
   program( self ) := undef

  flag := true
  */
}

rule epilog =
{
  print x + y + z // print dec( x )
  print x
  print y
  print z
  print cnt
  program( self ) := undef
}
